TYPE : int
ID : i
ASSIGN : =
NUM : 4
PLUS : +
NUM : 5
SEMI : ;
TYPE : char*
ID : func
LEFT_BRACKET : (
TYPE : int
ID : a
COMMA : ,
TYPE : char*
ID : b
RIGHT_BRACKET : )
LEFT_CURLY_BRAC : {
TYPE : int
ID : i
ASSIGN : =
NUM : 2
PLUS : +
NUM : 3
SEMI : ;
TYPE : char*
ID : s
SEMI : ;
WHILE : while
LEFT_BRACKET : (
ID : i
GREATER_THAN_EQUAL : >=
NUM : 0
RIGHT_BRACKET : )
LEFT_CURLY_BRAC : {
ID : s
ASSIGN : =
TYPE : stringPLUS : +
ID : s
SEMI : ;
ID : i
ASSIGN : =
ID : i
MINUS : +
NUM : 1
SEMI : ;
RIGHT_CURLY_BRAC : }
RETURN : return
ID : s
SEMI : ;
RIGHT_CURLY_BRAC : }
TYPE : int
ID : main
LEFT_BRACKET : (
RIGHT_BRACKET : )
LEFT_CURLY_BRAC : {
TYPE : char*
ID : s
ASSIGN : =
TYPE : stringSEMI : ;
IF : if
LEFT_BRACKET : (
TRUE : true
RIGHT_BRACKET : )
ID : func
LEFT_BRACKET : (
NUM : 9
COMMA : ,
ID : s
RIGHT_BRACKET : )
SEMI : ;
ELSE : else
LEFT_CURLY_BRAC : {
TYPE : int
ID : num
ASSIGN : =
ID : s
LEFT_SQAURE_BRAC : [
NUM : 0
RIGH_SQUARE_BRAC : ]
SEMI : ;
RIGHT_CURLY_BRAC : }
RETURN : return
NUM : 1
SEMI : ;
RIGHT_CURLY_BRAC : }
